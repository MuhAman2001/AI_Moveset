from fastapi import FastAPI
import math

import numpy as np
import tensorflow as tf

import rnn.RNNModel as rm

config = tf.ConfigProto(device_count = {'GPU': 0})
sess = tf.Session(config=config)

# sess = tf.Session()

def denormalize(values):
    mean = [0.0, 0.0, -0.0410389805474497, 3.754881443799062, 0.16960266638661206, 90.86166212284073, 16.56306548080943, 153.945147066866, -3.783368542385661, 17.463371646387262, 108.6301956485666, -24.97460268179608, -4.281476589934801, 24.826995095580127, -19.750635118804546, 5.064773177019304, 9.555070054171455, -23.594541448943335, 19.773459289282066, 117.13043736275586, 22.691493269588705, 1.8630506340754291, 30.511315251092146, 20.910049054510274, 11.46180426635709, 16.552405063507297, 25.119708929547674, 8.616423652719185, 138.00530467047304, -19.334097623868843, 9.504309347737975, 139.6306882949372, 14.230424461840167, 2.3201546999885387, 117.20568866660442, -26.961602969995322, 11.368263880600319, 55.93096760310573, -19.258748079820364, 3.6811271856181356, 120.83920211287818, 23.10183391274276, 15.262269641073273, 60.49458160119944, 17.780416844456344, 1.9122426915433384, 100.51043798204921, -0.3705261488061953, 22.272040746746605, 107.6332398393649, -25.08576540851737, 24.58279167055027, 117.01469062151018, 22.66095343988606, 12.121626056292829, 142.0998357318478, -2.7629513239457966, 0.3428139311669895, 89.14165590262702, -8.609754793498873, 0.3428352908691614, 89.87414077339061, 8.710228231309939, 0.1038077459954672, -0.9280963406245968, 0.9000545026892198, 0.093753639413845, -0.03435041276664385, -8.973623287966563E-4, 0.8789005025565452, 0.3593879438136113, -0.35858081525057317, 0.8731823719301531, -0.02438479977154723, -0.01936699544081731, 0.9603517822758053, -0.2686667266771685, 0.2678788558971503, 0.9601957611025317, 0.016667571290847494, 0.006794762175228032, 0.99844743953611, -0.03740649827647596, 0.03658355766576339, 0.9985111452998912, 0.013506419017715491, 0.008252004667412547, 0.07312881939201574, 0.05797556158224001, 0.3373017672688459, 0.9200515329780705, -0.9043882976701282, 0.34028504860150993, 0.42325086278719587, 0.6456121117153611, -0.030620531568757103, 0.5401058650742002, -0.7145006458941586, 0.256972570289829, 0.16474157165586206, 0.8056709352174574, -0.7827081033173728, 0.25532901630807037, 0.3001314473732168, 0.18484504114795172, 0.9316395066395696, 0.23339941406573472, -0.07831726984223497, -0.025598887073565127, 0.23869592032638068, -0.901200507641508, -0.04471453819998019, -0.03595886858006807, -0.3009382300878072, -0.9322599278639327, -0.9212225724585795, 0.2950367893937024, 0.44109702760697433, 0.4716520696264857, -0.0036475292775467747, 0.6391715561642806, -0.7501827714018212, 0.10321533878241153, 0.0798634082829057, 0.8210055637993203, -0.8024620392987359, 0.1417015502400984, 0.2209385997561038, 0.05685781827905817, 0.9520883290688293, 0.12817133503776698, -0.1426809685014912, 0.13293090316129316, 0.09707382434289254, -0.9316636662062332, 0.942302037251249, 0.2945712064632711, -0.2977364254553984, 0.9453706065839385, -0.054158506346484815, -0.025283944316802365, 0.9053264269573247, -0.06398469881158654, 0.17033463279116792, 0.8029652928916641, 0.052667608576055416, -0.2234825882321572, 0.7543165337550914, -0.44093599927719535, 0.3292798577976325, 0.7216568085010441, 0.3027440050835465, 0.24128561914112895, 0.6183642157682675, 0.6586259121543907, -0.6575881056628615, 0.6154969804551429, 0.0418401883550356, -0.06315215463545844, 0.9208279686952776, 0.0717846673509192, -0.07916843467434645, 0.9166391282017864, -0.05466467160785832, -0.08890987139349277, -0.013676826484588062, 0.9997782228453174, -0.9997782189528982, -0.013676831032212039, -6.50228784025721E-5, 2.8668105039682777E-5, -0.692310913198165, 0.47579131373817385, -0.42605764588763745, -0.6826154486854707, 0.22483344928411655, 0.16778859325315873, 0.6032057765934579, 0.6617974288936184, -0.6594581611888202, 0.601607075051891, 0.057895431145678716, -0.047152223590951024, 0.9295710924116094, 0.08995050057772098, -0.10947178111678434, 0.8987637202300471, -0.02937565908197884, -0.021986294797370257, -0.01367682648894374, 0.9997782228470772, -0.9997782189528871, -0.013676831032280115, -6.502288468353043E-5, 2.8639999987122382E-5, 0.0]
    std = [1.0, 1.0, 0.17059844144405037, 4.689219643948202, 2.586509996057973, 14.129223130767237, 19.51973278512522, 25.50883256917222, 14.813409998457752, 24.099371611400393, 25.230765472494205, 19.902138918070776, 23.519881103635903, 24.270359083797068, 19.396212622142844, 30.565793449851775, 26.898067380624138, 23.655260413854624, 24.72892691009716, 27.938475003901793, 17.51912405139585, 27.541914336051725, 34.57735777089541, 21.59522496464443, 35.21929922887955, 38.738714563623, 26.059035113568967, 18.63263947115914, 21.40234879304837, 11.013943879998832, 16.854270707085597, 20.954057923131998, 13.19162927994834, 25.740207922633434, 20.223727391723802, 14.862436715511976, 15.140474771110846, 18.093218471465928, 11.3889290983492, 23.711086155701597, 21.6811040833525, 13.599498167996149, 16.875349257202203, 26.039745812674077, 11.230548788536765, 2.6401685381937288, 13.435708773393314, 2.400025507324406, 24.955018803839454, 27.32861702076607, 22.472123445054756, 25.531910588600077, 30.50673041184779, 19.97314422681997, 16.336011230064834, 21.47395399931037, 12.508547513411669, 0.4797723929978861, 13.42393696230659, 1.0641676091800016, 0.4797300689951563, 15.433453602099746, 0.6418321999066957, 0.25833079877078297, 0.24723740169508254, 0.24863909765133174, 0.2283198776295865, 0.22223791469584359, 0.12880346671937065, 0.12632506058396428, 0.22119836033183982, 0.22206402546861057, 0.14023858912119616, 0.1819028167504348, 0.19855023089199214, 0.020470315238630913, 0.06473523013363759, 0.0655241203578321, 0.02037800192183845, 0.031226923568616845, 0.0344993994334848, 0.01, 0.020849185075997, 0.02165270130621888, 0.01, 0.033319874134211086, 0.032745242489722666, 0.16621495744273426, 0.0367031035477523, 0.1808556174196447, 0.05340329950342184, 0.05123801498075397, 0.17364062432064842, 0.272805289759391, 0.2700517564332259, 0.3997340123950571, 0.23258591770380171, 0.274226020696426, 0.3137062217601436, 0.4687767764383726, 0.20435813738353065, 0.19842901008120062, 0.39340066433052356, 0.10499340787679759, 0.23453660125784567, 0.08409950583504028, 0.22027223553927738, 0.12773596078727736, 0.2734263407063915, 0.21342279628076508, 0.09708364424246996, 0.14651161125632498, 0.06233994638434514, 0.1868080139674144, 0.050770669790890885, 0.04922273278028648, 0.1899677597581443, 0.24967290045304988, 0.3868415601715705, 0.36696683152573906, 0.25929243810670677, 0.21364621362815533, 0.3761272121403352, 0.48710195063976525, 0.1980453433032718, 0.19966328275358863, 0.430676700293015, 0.15404190937119525, 0.2791654441207566, 0.10967117141065266, 0.17230697283249818, 0.150149830059942, 0.2286805267324015, 0.17080365979730064, 0.12617377198684593, 0.02996530383292566, 0.12740093383487786, 0.12341022496477537, 0.03358684098336122, 0.06602078975263143, 0.03877974806879337, 0.11384003087472461, 0.28079792381358737, 0.29639194339381886, 0.21725274238674752, 0.2186059463806244, 0.41852359717701715, 0.2576957477398417, 0.32611487963509844, 0.3056172347389208, 0.28265096859021815, 0.2666803647923767, 0.20081250089784655, 0.3182744742558545, 0.2860638963621617, 0.28445235354444964, 0.3164200271890891, 0.035230614339087085, 0.0378549051771224, 0.07392104348272097, 0.3081272870972454, 0.304404106153553, 0.08845362752169042, 0.2114090920117664, 0.20963834495624692, 0.01601180749844469, 0.01, 0.01, 0.016011812884476093, 0.01, 0.01, 0.3139839144120944, 0.34666491392391924, 0.34916769349757837, 0.33077072704898774, 0.26101039297018624, 0.22342767631349142, 0.33234140891194835, 0.29509398712867324, 0.2930919073250777, 0.32917373698509544, 0.0393975324261758, 0.0493350565767558, 0.07598444759983589, 0.2999192078611625, 0.3063473256442262, 0.13152849550030413, 0.1530629404493585, 0.2764018978092524, 0.016011807503531848, 0.01, 0.01, 0.016011812884588805, 0.01, 0.01, 1.0]

    data = []
    for i in range(len(values)):
        data.append(((values[i] * std[i]) + mean[i]))

    return data

def scale_vals(values, scale):
    data = []
    for i in range(len(values)):
        data.append((values[i])*scale)

    return data


def get_joints(vals, root_pos, dir_thetha):
    keys = ['Head_End', 'LeftHand', 'LeftFoot', 'LeftToe_End', 'RightHand', 'RightFoot', 'RightToe_End', 'LeftArm', 'RightArm', 'LeftForeArm', 'LeftLeg', 'RightForeArm', 'RightLeg', 'Spine', 'LeftHand_End', 'RightHand_End', 'Neck', 'LeftUpLeg', 'RightUpLeg']
    nn_res = {}
    nn_res[f'{"root"}_x'], nn_res[f'{"root"}_y'], nn_res[f'{"root"}_z'] = root_pos[0], 0, root_pos[1]
    nn_res['direction'] = dir_thetha
    
    itx = 0
    for j in range(6,63,3):
        joint = keys[itx]
        nn_res[f'{joint}_x'], nn_res[f'{joint}_y'], nn_res[f'{joint}_z'] = vals[j], vals[j+1], vals[j+2]
        itx+=1
        
    return nn_res

def scale(vector, scalar): # scale a vector given a scalar
    vector[0] *= scalar
    vector[1] *= scalar

def add(vector1, vector2): # add two vectors
    vector1[0] += vector2[0]
    vector1[1] += vector2[1]


def transform(position, direction, angle, tx, ty): # transform the position and angle, given x and y component of the predicted motion
    xAxis = [direction[0], direction[1]]
    yAxis = [-direction[1], direction[0]]

    scale(xAxis, tx)

    scale(yAxis, ty)

    add(position, xAxis)
    add(position, yAxis)
    direction = rotate(direction, getAngle(angle))
    return position, direction

def getAngle(direction): 
    import math

    sinAngle = math.sin(direction)
    cosAngle = math.cos(direction)

    return math.atan2(sinAngle, cosAngle)

def getPolarTheta(point): # get theta of the polar angle equlivaent of a rectangular coordinate from origin (0, 0)
    radianAngle = math.atan2(round(point[1],5),round(point[0],5))
    # theta = 180 * theta/math.pi

    theta = radianAngle*(180/math.pi)
    return theta + 180


def rotate(vector, angle): # rotate a vector towards a direction
    x = vector[0]
    y = vector[1]
    sinVal = math.sin(angle)
    cosVal = math.cos(angle)
    return [cosVal*x- sinVal*y, sinVal*x + cosVal*y]

def direction_angle(base, target):
    x1, y1 = base[0], base[1]
    x2, y2 = target[0], target[1]
    return math.atan2(x1 * y2 - y1 * x2, x1 * x2 + y1 * y2)

def offset(angle, offsetVal):
    angle += offsetVal
    return round(angle%360, 2)
    
ai_mv_m = None
ai_mv_current_y = None
ai_mv_state = None

c = rm.RNNConfig()

ai_mv_m = c.model(1, 1)


saver = tf.train.Saver()
saver.restore(sess, "trained_models\\AI_Moveset\\train\\ckpt")



ai_mv_current_y = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]


m = ai_mv_m
current_y = ai_mv_current_y
state = ai_mv_state


current_pos = [0, 0]    # starting at 0, 0
current_direction = [1, 0]  # starting angle of the locoomotion





feed_dict = { m.x:[[[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], m.prev_y:current_y }


state = np.zeros([1, c.RNN_SIZE*c.NUM_OF_LAYERS*2])
feed_dict[m.prev_state] = state

output, state, current_y = sess.run([m.generated, m.final_state, m.final_y], feed_dict)

ai_mv_current_y = current_y
ai_mv_state = state



app = FastAPI()

@app.get("/")
def test():
    return {"message": "Running...", "data": {}}


@app.get("/motion/{id}")
def setMotion(id: int):
    return {"message": "Success", "data": {}}



kick_counter = 0



@app.get("/frame")
def getFrame(joy_x:float,joy_y:float, kick:str):
    global kick_counter 
    global current_pos
    global current_direction

    goal_direction = (joy_x, joy_y)

    if kick == "True":
        print("\n\nKick\n\n")
        kick_counter = 22

    

    target_angle = (direction_angle((round(current_direction[0],2), round(current_direction[1],2)), (round(goal_direction[1],2), round(goal_direction[0],2))))


    

    global ai_mv_current_y
    global ai_mv_state

    m = ai_mv_m
    current_y = ai_mv_current_y
    state = ai_mv_state


    if kick_counter > 0:
        kick_counter -= 1
        feed_dict = { m.x:[[[0.0, 0.0, 1.0, 0.0, 0.0, 0.0, target_angle, 0]]], m.prev_y:current_y }
    else:
            feed_dict = { m.x:[[[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, target_angle, 0]]], m.prev_y:current_y }


    
    feed_dict[m.prev_state] = state
    output, state, current_y = sess.run([m.generated, m.final_state, m.final_y], feed_dict)


    ai_mv_current_y = current_y
    ai_mv_state = state

    vals = (list(output))[0][0]
    denom_vals = (denormalize(vals)) # denormalize 

    current_pos, current_direction = transform(current_pos, current_direction, denom_vals[2], denom_vals[3], denom_vals[4])

    scale = 0.135

    denom_vals = scale_vals(denom_vals, scale)
    
    return {"jointdata":[get_joints(denom_vals, (-current_pos[1]*scale, -current_pos[0]*scale), offset(getPolarTheta(current_direction), 260))]}


@app.get("/trail")
def getFrame(joy_x:float,joy_y:float):
    print(joy_x, joy_y)
    return {"x, y":(joy_x, joy_y)}
    
@app.get("/details")
def details():
    return {"message":"success","data":{"motion_index":"using nn"}}


@app.get("/frame/reset")
def resetFrames():
    return {"message": "Success", "data": {"motion_i": "reset successful"}}
